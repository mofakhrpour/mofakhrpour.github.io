{"version":3,"sources":["actions/main.ts","reportWebVitals.ts","reducers/main.ts","reducers/index.ts","helpers/constants.ts","apis/requests/main-requests.ts","sagas/main.ts","sagas/index.ts","helpers/store.ts","helpers/history.ts","pages/app/index.tsx","index.tsx","actions/actionTypes.ts"],"names":["getWorkHistory","type","ActionTypes","GET_WORK_HISTORY","workHistoryReceived","payload","WORK_HISTORY_RECEIVED","getProjects","GET_PROJECTS","projectsReceived","PROJECTS_RECEIVED","getCompanies","GET_COMPANIES","companiesReceived","COMPANIES_RECEIVED","showProjects","SHOW_PROJECTS","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","initState","workHistory","projects","companies","Main","state","arguments","length","undefined","BASE_URL","document","baseURI","getWorkHistorys","fetch","res","json","getProjectList","getCompanyList","watcherMain","takeLatest","workerGetWorkHistory","workerGetProjects","workerGetCompanies","action","response","call","ApiRequests","put","ActionMain","rootSaga","all","sagaMiddleware","createSagaMiddleware","Middlewares","compose","applyMiddleware","history","createBrowserHistory","MainPage","React","lazy","App","_jsx","children","Suspense","fallback","Router","Switch","Route","exact","path","component","store","createStore","combineReducers","run","configureStore","ReactDOM","render","Provider","getElementById","WORK_HISTORY_FAILED","PROJECTS_FAILED","COMPANIES_FAILED"],"mappings":"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","file":"static/js/main.e6ed8f37.chunk.js","sourcesContent":["import { Company } from './../apis/models/company-list';\nimport { Project } from '../apis/models/project-list';\nimport { WorkHistoryModel } from './../apis/models/work-history';\nimport { ActionTypes } from \"./actionTypes\"\n\nexport const getWorkHistory = () => {\n    return {\n        type: ActionTypes.GET_WORK_HISTORY\n    }\n}\nexport const workHistoryReceived = (payload: WorkHistoryModel[]) => {\n    return {\n        type: ActionTypes.WORK_HISTORY_RECEIVED,\n        payload\n    }\n}\n\nexport const getProjects = () => {\n    return {\n        type: ActionTypes.GET_PROJECTS\n    }\n}\nexport const projectsReceived = (payload: Project[]) => {\n    return {\n        type: ActionTypes.PROJECTS_RECEIVED,\n        payload\n    }\n}\n\nexport const getCompanies = () => {\n    return {\n        type: ActionTypes.GET_COMPANIES\n    }\n}\nexport const companiesReceived = (payload: Company[]) => {\n    return {\n        type: ActionTypes.COMPANIES_RECEIVED,\n        payload\n    }\n}\n\n\nexport const showProjects = (payload: boolean) => {\n    return {\n        type: ActionTypes.SHOW_PROJECTS,\n        payload\n    }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Project } from './../apis/models/project-list';\nimport { ActionTypes } from '../actions/actionTypes';\n\nconst initState = {\n    workHistory: [],\n    projects: [],\n    companies: [],\n    showProjects: false\n}\n\nexport const Main = (state = initState, { type, payload }: any) => {\n\n    switch (type) {\n\n        case ActionTypes.WORK_HISTORY_RECEIVED:\n            return {\n                ...state,\n                workHistory: payload\n            }\n        case ActionTypes.PROJECTS_RECEIVED:\n            return {\n                ...state,\n                projects: payload\n            }\n        case ActionTypes.COMPANIES_RECEIVED:\n            return {\n                ...state,\n                companies: payload\n            }\n        case ActionTypes.SHOW_PROJECTS:\n            return {\n                ...state,\n                showProjects: payload\n            }\n        default:\n            return state;\n    }\n\n}","import { combineReducers } from \"redux\";\nimport { Main } from './main'\n\nexport default () => combineReducers({\n    Main\n});","// export const BASE_URL = \"https://mofakhrpour.github.io\";\n// export const BASE_URL = \"http://localhost:3000\";\nexport const BASE_URL = document.baseURI;","import { Company } from '../models/company-list';\nimport { WorkHistoryModel } from \"../models/work-history\";\nimport { Project } from \"../models/project-list\";\nimport { BASE_URL } from '../../helpers/constants';\n\n\nexport const getWorkHistorys = () : Promise<WorkHistoryModel[]> => {\n    return fetch(BASE_URL + '/fake-db/word-history.json').then(res => res.json());\n}\n\n\nexport const getProjectList = (): Promise<Project[]> => {\n    return fetch(BASE_URL + '/fake-db/projects.json').then(res => res.json());;\n}\n\n\nexport const getCompanyList = (): Promise<Company[]> => {\n    return fetch(BASE_URL + '/fake-db/companies.json').then(res => res.json());;\n}","import { call, put, takeLatest } from \"@redux-saga/core/effects\";\nimport { ActionTypes } from '../actions/actionTypes';\nimport { ActionMain } from '../actions';\nimport { ApiRequests } from '../apis/requests';\n\nexport function* watcherMain() {\n    yield takeLatest(ActionTypes.GET_WORK_HISTORY, workerGetWorkHistory);\n    yield takeLatest(ActionTypes.GET_PROJECTS, workerGetProjects);\n    yield takeLatest(ActionTypes.GET_COMPANIES, workerGetCompanies);\n}\n\n\nfunction* workerGetWorkHistory(action: any): any {\n    let response = yield call(ApiRequests.getWorkHistorys);\n    yield put(ActionMain.workHistoryReceived(response));\n}\n\nfunction* workerGetProjects(action: any): any {\n    const response = yield call(ApiRequests.getProjectList)\n    yield put(ActionMain.projectsReceived(response));\n}\n\nfunction* workerGetCompanies(action: any): any {\n    const response = yield call(ApiRequests.getCompanyList);\n    yield put(ActionMain.companiesReceived(response));\n}","import { all } from 'redux-saga/effects';\nimport { watcherMain } from './main';\n\nexport default function* rootSaga() {\n    yield all([ watcherMain() ]);\n}","import { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst Middlewares = compose(applyMiddleware(sagaMiddleware));\n\nexport default function configureStore() {\n    const store = createStore(rootReducer(), Middlewares);\n\n    sagaMiddleware.run(rootSaga);\n    return store;\n}","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();","import React, { Suspense } from 'react';\nimport { history } from '../../helpers/history';\nimport { Router, Route, Switch, Redirect } from 'react-router';\n\nconst MainPage = React.lazy(() => import('../main'));\n\nexport function App() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Router history={history}>\n          <Switch>\n            <Route exact path=\"/\" component={MainPage} />\n          </Switch>\n        </Router>\n      </Suspense>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/styles';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport configureStore from './helpers/store';\nimport { App } from './pages/app';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","export const ActionTypes = {\n    GET_WORK_HISTORY: 'GET_WORK_HISTORY',\n    WORK_HISTORY_RECEIVED: 'WORK_HISTORY_RECEIVED',\n    WORK_HISTORY_FAILED: 'WORK_HISTORY_FAILED',\n\n    GET_PROJECTS: 'GET_PROJECTS',\n    PROJECTS_RECEIVED: 'PROJECTS_RECEIVED',\n    PROJECTS_FAILED: 'PROJECTS_FAILED',\n\n    GET_COMPANIES: 'GET_COMPANIES',\n    COMPANIES_RECEIVED: 'COMPANIES_RECEIVED',\n    COMPANIES_FAILED: 'COMPANIES_FAILED',\n\n    SHOW_PROJECTS: 'SHOW_PROJECTS'\n}"],"sourceRoot":""}